{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"hw",
				"hw7_ns"
			],
			[
				"os",
				"ostream_iterator"
			],
			[
				"out",
				"out_it"
			],
			[
				"ou",
				"out_it"
			],
			[
				"for",
				"for	For Loop"
			],
			[
				"res",
				"result_size"
			],
			[
				"resul",
				"result_size"
			],
			[
				"bu",
				"buf_size"
			],
			[
				"resu",
				"result"
			],
			[
				"strc",
				"string_cat"
			],
			[
				"cstr",
				"c_str"
			],
			[
				"socket",
				"socklen_t"
			],
			[
				"ac",
				"accept_result"
			],
			[
				"ser",
				"servaddr"
			],
			[
				"li",
				"listenfd"
			],
			[
				"se",
				"server_address"
			],
			[
				"conn",
				"connection"
			],
			[
				"lis",
				"listen_result"
			],
			[
				"server",
				"server_socket"
			],
			[
				"str",
				"string"
			],
			[
				"scan",
				"scan_for_new_files_for"
			],
			[
				"serv",
				"server_address"
			],
			[
				"Swap",
				"SwapIntPointers"
			],
			[
				"cat",
				"category"
			],
			[
				"mis",
				"missionaries_on_right"
			],
			[
				"Init",
				"Initialize"
			],
			[
				"cur",
				"current_state"
			],
			[
				"Miss",
				"MissionariesHere"
			],
			[
				"SafeNo",
				"SafeNoMissionariesThere"
			],
			[
				"Saf",
				"SafeNoMissionariesHere"
			],
			[
				"Mi",
				"MissionariesThere"
			],
			[
				"Cann",
				"CannibalsThere"
			],
			[
				"C",
				"CannibalsThere"
			],
			[
				"Mis",
				"MissionariesThere"
			],
			[
				"Sel",
				"SelectNext"
			],
			[
				"Sele",
				"SelectNext"
			],
			[
				"Ca",
				"CannibalsHere"
			],
			[
				"ASS",
				"ASSERT_FALSE"
			],
			[
				"Ge",
				"GenerateMoves"
			],
			[
				"be",
				"beginend	$1.begin(), $1.end()"
			],
			[
				"Es",
				"EstimateCost"
			],
			[
				"Est",
				"EstimateReturnToInitialStateCost"
			],
			[
				"Can",
				"CannibalsOnRight"
			],
			[
				"miss",
				"missionaries"
			],
			[
				"cann",
				"cannibals_on_right"
			],
			[
				"A",
				"ASSERT_TRUE"
			],
			[
				"M",
				"MoveMixedLeft"
			],
			[
				"ASSE",
				"ASSERT_STRING_EQUALS"
			],
			[
				"MoveT",
				"MoveTwoMissionariesRight"
			],
			[
				"Mov",
				"MovingRight"
			],
			[
				"S",
				"SelectMovesWithMixedFromLeft"
			],
			[
				"Ver",
				"VerifySelectedMoves"
			],
			[
				"Select",
				"SelectMixedMoveFromRight"
			],
			[
				"VerifySe",
				"VerifySelectedMoves"
			],
			[
				"Gen",
				"GenerateAllMoves"
			],
			[
				"boa",
				"boat_moving_right"
			],
			[
				"VerifyB",
				"VerifyBoatPositionForMoveFromLeft"
			],
			[
				"Bo",
				"BoatOnRight"
			],
			[
				"VerifyBo",
				"VerifyBoatPositionForMoveFromLeft"
			],
			[
				"Veri",
				"VerifyMoves"
			],
			[
				"CannibalU",
				"VerifyCannibalUnderpopulation"
			],
			[
				"V",
				"VerifyCannibalException"
			],
			[
				"VerifyMi",
				"VerifyMissonaryException"
			],
			[
				"Verif",
				"VerifyIntermediateRightState"
			],
			[
				"ca",
				"cannibals_on_right"
			],
			[
				"mission",
				"missionaries_on_right"
			],
			[
				"Ass",
				"ASSERT_STRING_EQUALS"
			],
			[
				"mi",
				"missionaries"
			],
			[
				"canni",
				"cannibals_moving"
			],
			[
				"sc",
				"scan_for_new_files_for"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"String.h\"\n\nString::String( const char *s ): head( NULL )\n{\n    head = make_buffer( s );\n}\n\nString::String( const String &s ): head( NULL )\n{\n    head = copy_buffer( s.head );\n}\n\nString::~String()\n{\n    head = free_buffer( head );\n}\n\nint String::length() const\n{\n    int i = 0;\n\n    for ( ListNode *it = head; it != NULL; it = it->next )\n    {\n        ++i;\n    }\n\n    return i;\n}\n\nint String::indexOf( const char c ) const\n{\n    int i = 0;\n\n    for ( ListNode *it = head; it != NULL; it = it->next )\n    {\n\n        if ( it->info == c )\n        {\n            return i;\n        }\n\n        ++i;\n    }\n\n    return -1;\n}\n\nvoid String::print( ostream &out )\n{\n    for ( ListNode *it = head; it != NULL; it = it->next )\n    {\n        out.put( it->info );\n    }\n}\n\nvoid String::read( istream &in )\n{\n    int buf_size = 1024;\n    char *b = new char[buf_size];\n    ListNode *result = NULL;\n\n    while ( in.good() )\n    {\n        in.get( b, buf_size );\n\n        if ( in.gcount() )\n        {\n            ListNode *t = make_buffer( b );\n            delete[] b;\n            ListNode *u = append_buffer( result, t );\n            result = free_buffer( result );\n            result = u;\n            t = free_buffer( t );\n        }\n    }\n\n    head = free_buffer( head );\n    head = result;\n}\n\nString &String::operator = ( const String &s )\n{\n    ListNode *t = copy_buffer( s.head );\n    head = free_buffer( head );\n    head = t;\n\n    return *this;\n}\n\nchar &String::operator []( int index )\n{\n    assert( inBounds( index ) );\n    ListNode *t = head;\n\n    for ( int i = index; 0 <= i; --i )\n    {\n        t = t->next;\n    }\n\n    return t->info;\n}\n\nbool String::operator == ( const String &s ) const\n{\n    ListNode *self ;\n    ListNode *other ;\n\n    for ( self = head, other = s.head;\n            self != NULL && other != NULL && self->info == other->info;\n            self = self->next, other = other->next )\n    {\n    }\n\n    return self == other;\n}\n\nString &String::operator + ( const String &s ) const\n{\n    ListNode *v = append_buffer( head, s.head );\n    String *w = new String();\n    w->head = free_buffer( w->head );\n    w->head = copy_buffer( v );\n    v = free_buffer( v );\n    return *w;\n}\n\nString &String::operator += ( const String &s )\n{\n    String t = *this + s;\n    head = free_buffer( head );\n    head = copy_buffer( t.head );\n    return *this;\n}\n\nbool String::inBounds( int i )\n{\n    return i >= 0 && i < length();\n}\n\nostream &operator << ( ostream &out, String str )\n{\n    str.print( out );\n    return out;\n}\n\nistream &operator >> ( istream &in, String &str )\n{\n    str.read( in );\n    return in;\n}\n",
			"file": "/home/jim/Documents/github/CS542/HW4/String.cpp",
			"file_size": 2604,
			"file_write_time": 1362368993000000,
			"settings":
			{
				"buffer_size": 2604,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 75.0,
		"selected_items":
		[
			[
				"Package Control: in",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/jim/Documents/github/CS542/HW7/words.txt",
		"/home/jim/Documents/github/CS542/HW7/hw7.cpp",
		"/home/jim/Documents/github/CS542/HW7/Makefile",
		"/home/jim/Documents/github/CS542/HW7/even.txt",
		"/home/jim/Documents/github/CS542/HW7/integers.txt",
		"/home/jim/Documents/github/CS542/HW7/wordcounter_test.cpp",
		"/home/jim/Documents/github/CS542/HW7/WordCounter.cpp",
		"/home/jim/Documents/github/CS542/HW7/WordCounter.h",
		"/home/jim/Documents/github/CS542/HW7/NumberSorter.cpp",
		"/home/jim/Documents/github/CS542/HW7/exclude.txt",
		"/home/jim/Documents/github/CS542/HW7/copyif.h",
		"/home/jim/Documents/github/CS542/HW7/test.cpp",
		"/home/jim/Documents/github/CS542/HW7/numbersorter_test.cpp",
		"/home/jim/Documents/github/CS542/HW7/NumberSorter.h",
		"/home/jim/Documents/github/CS542/HW7/build.log",
		"/home/jim/Downloads/7.html.txt",
		"/home/jim/Documents/github/CS542/HW6/Array.h",
		"/home/jim/Documents/github/CS542/HW6/matrix_test.cpp",
		"/home/jim/Documents/github/CS542/HW6/array_test.cpp",
		"/home/jim/Documents/github/CS542/HW6/hw6.cpp",
		"/home/jim/Documents/github/CS542/HW6/Makefile",
		"/home/jim/Downloads/6.html.txt",
		"/home/jim/Documents/github/CS542/HW1/Stack/Stack.h",
		"/home/jim/Documents/github/CS542/HW6/Matrix.h",
		"/home/jim/Documents/github/CS542/HW6/log.txt",
		"/home/jim/Documents/github/CS542/HW5/continuous_testing",
		"/home/jim/Documents/github/CS542/HW5/Makefile",
		"/home/jim/Documents/github/CS542/HW5/test.cpp",
		"/home/jim/Documents/github/CS542/HW5/Alien.h",
		"/home/jim/Documents/github/CS542/HW5/Alien.cpp",
		"/home/jim/Documents/github/CS542/HW5/hw5.cpp",
		"/home/jim/Documents/github/CS542/HW5.zip",
		"/home/jim/Documents/github/CS542/HW5/Horse.h",
		"/home/jim/Documents/github/CS542/HW5/Horse.cpp",
		"/home/jim/Documents/github/CS542/HW4/String.h",
		"/home/jim/Documents/github/CS542/HW4/String.cpp",
		"/home/jim/Documents/github/CS542/HW5/Snake.h",
		"/home/jim/Documents/github/CS542/HW5/Snake.cpp",
		"/home/jim/Documents/github/CS542/HW5/Animal.cpp",
		"/home/jim/Documents/github/CS542/HW5/Animal.h",
		"/home/jim/Documents/github/CS542/HW4/hw4.cpp",
		"/home/jim/Documents/github/CS542/HW3/String.cpp",
		"/home/jim/Documents/github/CS542/HW3/test.cpp",
		"/home/jim/Documents/github/CS542/HW3/hw3.cpp",
		"/home/jim/Documents/github/CS542/HW3/Makefile",
		"/home/jim/Documents/github/CS542/HW3/String.h",
		"/home/jim/Documents/github/CS537/HW1/continuous_testing",
		"/home/jim/Documents/github/sockets/caseClient.c",
		"/home/jim/Documents/github/sockets/caseServer.c",
		"/home/jim/Documents/github/CS537/HW1/server.h",
		"/home/jim/Documents/github/CS542.o/HW2/Makefile",
		"/home/jim/Documents/github/CS542/HW2/LinkedStack.h",
		"/home/jim/Documents/github/CS542/HW2/main.cpp",
		"/home/jim/Documents/github/CS571/Final/main.cpp",
		"/home/jim/Documents/github/CS571/Final/continuous_testing",
		"/home/jim/Documents/github/CS542/HW2/LinkedStack.cpp",
		"/home/jim/Documents/github/CS542/HW2/continuous.rb",
		"/home/jim/Documents/github/CS542/HW2/CharLinkedListPair.h",
		"/home/jim/Documents/github/CS571/HW7/tests.txt",
		"/home/jim/Documents/github/CS571/HW7/Makefile",
		"/home/jim/Downloads/icbr/mcmops.mops",
		"/home/jim/Downloads/icbr/mcdmap.mops",
		"/home/jim/Downloads/icbr/mcdmap.lsp",
		"/home/jim/Documents/github/CS571/HW7/interleave.clisp",
		"/home/jim/Dropbox/cs571RY/LispFiles/inter.lsp",
		"/home/jim/Documents/github/CS571/HW7/continuous_testing",
		"/home/jim/Dropbox/cs571RY/LispFiles/eliza.lsp",
		"/home/jim/Documents/github/CS571/Final/Test.h",
		"/home/jim/Documents/github/CS571/Final/TestFramework.h",
		"/home/jim/Documents/github/CS571/Final/Program.h",
		"/home/jim/Documents/github/CS571/Final/CrossingState.h",
		"/home/jim/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/jim/Documents/github/CS571/Final/Move.h",
		"/home/jim/Documents/github/CS571/Final/Makefile",
		"/home/jim/Documents/dnrtv_dotnet_bootcamp_prep/continuous_testing"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"/home/jim/Documents/github/CS542/HW6"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"hw6",
			"test.cpp",
			"5",
			"hw4",
			"endif",
			"Yfbps4",
			"clilen",
			"connfd",
			"cliaddr",
			"clilen",
			"connfd",
			"tid",
			"cliaddr",
			"backlog",
			"top",
			"print",
			"IsS"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"hw7",
			"6",
			"hw5",
			"connection",
			"client_address",
			"last"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/jim/Documents/github/CS542/HW4/String.cpp",
					"settings":
					{
						"buffer_size": 2604,
						"regions":
						{
						},
						"selection":
						[
							[
								1111,
								1111
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1540.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
